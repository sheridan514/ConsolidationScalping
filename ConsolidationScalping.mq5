//+------------------------------------------------------------------+
//|                                      ConsolidationScalping.mq5 |
//|                        Copyright 2024, Investwisdom             |
//|                                    https://www.investwisdom.cz |
//+------------------------------------------------------------------+
#property copyright "Copyright 2024, Investwisdom"
#property link      "https://www.investwisdom.cz"
#property version   "1.00"
#property strict

#include "Settings.mqh"              // Enum definice MUS√ç b√Ωt p≈ôed inputy!

// === VOLBA STRATEGIE ===
input group "üéØ Strategie Selection"
input bool InpEnableConsolidation = true;    // Povolit konsolidaƒçn√≠ syst√©m
input bool InpEnableTrend = true;           // Povolit trendov√Ω syst√©m

// === KONSOLIDAƒåN√ç PARAMETRY ===
input group "üìä KONSOLIDACE - Z√°kladn√≠"
input string   InpSymbolsToTrade = "EURUSD,GBPUSD,USDJPY"; // Symboly pro trading
input double   InpFixedLot = 0.05;               // Fixn√≠ velikost lotu  
input int      InpMagicNumber = 66600;           // Magic number 
input bool     InpScalpingEnabled = true;        // Povolit scalping pozice
input int      InpMaxPositions = 5;              // Maxim√°ln√≠ poƒçet pozic souƒçasnƒõ

input group "üìä KONSOLIDACE - Risk Management"
input double   InpRiskRewardRatio = 0.01;        // Risk-Reward Ratio (TP:SL) - men≈°√≠ = SL d√°le
input int      InpMinTPPips = 3;                 // Minim√°ln√≠ TP v pipech (filtr entry)
input int      InpTrailStepPips = 5;             // Krok trailingu po dosa≈æen√≠ TP (pipy)
input int      InpTrailLockPips = 10;            // Minim√°ln√≠ zisk k uzamƒçen√≠ (pipy)

input group "üìä KONSOLIDACE - Entry"
input double   InpMinScore = 80.0;               // Minim√°ln√≠ sk√≥re symbolu pro vstup
input ENUM_SIGNAL_LOGIC InpSignalLogic = LOGIC_HYBRID; // Logika sign√°l≈Ø
input bool     InpRequireBBConfirmation = true;  // Vy≈æadovat BB potvrzen√≠ pro sign√°ly

input group "üìä KONSOLIDACE - Sk√≥rov√°n√≠ ADX"
input bool     InpUseADXScoring = true;          // Pou≈æ√≠t ADX pro sk√≥rov√°n√≠
input int      InpADXPeriod = 14;                // Perioda ADX
input double   InpScoreADXIdeal = 18.0;          // ADX: Ide√°ln√≠ hodnota pro 100% sk√≥re
input double   InpScoreADXTop = 30.0;            // ADX: Hodnota pro 0% sk√≥re

input group "üìä KONSOLIDACE - Sk√≥rov√°n√≠ BB"
input bool     InpUseBBScoring = true;           // Pou≈æ√≠t BB pro sk√≥rov√°n√≠
input double   InpScoreBBIdeal = 0.15;           // ≈†√≠≈ôka BB %: Ide√°ln√≠ hodnota pro 100% sk√≥re
input double   InpScoreBBTop = 0.25;             // ≈†√≠≈ôka BB %: Hodnota pro 0% sk√≥re

input group "üìä KONSOLIDACE - Sk√≥rov√°n√≠ ATR"
input bool     InpUseATRScoring = true;          // Pou≈æ√≠t ATR pro sk√≥rov√°n√≠
input double   InpScoreATRIdeal = 0.07;          // ATR %: Ide√°ln√≠ hodnota pro 100% sk√≥re
input double   InpScoreATRTop = 0.13;            // ATR %: Hodnota pro 0% sk√≥re

input group "üìä KONSOLIDACE - Sk√≥rov√°n√≠ RSI"
input bool     InpUseRSIScoring = false;         // Pou≈æ√≠t RSI pro sk√≥rov√°n√≠
input double   InpScoreRSITop = 100.0;           // RSI: Hodnota pro 100% sk√≥re

input group "üìä KONSOLIDACE - Sign√°ly BB"
input bool     InpSignalUseBB = true;            // Pou≈æ√≠t BB jako spou≈°tƒõƒç
input int      InpBBPeriodSignal = 20;           // Perioda BB (pro sign√°l)
input double   InpBBDeviationSignal = 2.0;       // Odchylka BB (pro sign√°l)

input group "üìä KONSOLIDACE - Sign√°ly RSI"
input bool     InpSignalUseRSI = false;          // Pou≈æ√≠t RSI jako spou≈°tƒõƒç sign√°lu
input double   InpRSIOverbought = 70.0;          // RSI: √örove≈à p≈ôekoupenosti
input double   InpRSIOversold = 30.0;            // RSI: √örove≈à p≈ôeprodanosti

input group "üìä KONSOLIDACE - Sign√°ly Stochastic"
input bool     InpSignalUseStochastic = true;    // Pou≈æ√≠t Stochastic jako spou≈°tƒõƒç
input int      InpStochasticK = 14;              // Perioda %K
input int      InpStochasticD = 3;               // Perioda %D
input int      InpStochasticSlowing = 3;         // Zpomalen√≠
input double   InpStochasticOverbought = 70.0;   // P≈ôekoupen√° √∫rove≈à
input double   InpStochasticOversold = 30.0;     // P≈ôeprodan√° √∫rove≈à
input double   InpStochasticConfirmBuy = 32.0;   // Potvrzovac√≠ √∫rove≈à pro BUY 
input double   InpStochasticConfirmSell = 75.0;  // Potvrzovac√≠ √∫rove≈à pro SELL

input group "üìä KONSOLIDACE - BB Slope"
input double   InpBBSlopeThreshold = 0.1;        // BB sklon threshold (pipy)

input group "üìä KONSOLIDACE - Trend Protection"
input bool     InpCloseOnTrend = true;           // Uzav≈ô√≠t pozice p≈ôi detekci trendu
input double   InpTrendThreshold = 60.0;         // Score threshold pro trend
input bool     InpUseEarlyWarning = true;        // Early warning detekci konce konsolidace
input double   InpWarningThreshold = 65.0;      // Score threshold pro varov√°n√≠
input double   InpBBExpansionThreshold = 1.2;   // BB expansion ratio threshold

input group "üìä KONSOLIDACE - Recovery Trading"
input bool     InpUseRecoveryTrading = true;        // Aktivovat recovery trading
input bool     InpRecoveryOnSLHit = false;          // Recovery p≈ôi ka≈æd√©m SL hit
input double   InpRecoveryTargetRatio = 1.5;       // C√≠lov√Ω pomƒõr k pokryt√≠ ztr√°ty
input double   InpRecoveryLotMultiplier = 1.5;     // N√°sobiƒç lot size pro recovery
input int      InpRecoverySLPips = 20;             // Poƒç√°teƒçn√≠ SL pro recovery pozice
input int      InpRecoveryTrailStartPips = 3;       // Kdy zaƒç√≠t trailing
input int      InpRecoveryTrailStepPips = 2;         // Krok trailing SL

input group "üìä KONSOLIDACE - Filtry"
input bool     InpUseKCSqueezeFilter = false;     // KC Squeeze filtr
input int      InpKCPeriod = 20;                 // Perioda Keltnerova Kan√°lu
input int      InpKCMAPeriod = 20;               // Perioda MA pro ATR
input double   InpKCMultiplier = 1.5;            // N√°sobiƒç ATR pro ≈°√≠≈ôku kan√°lu
input ENUM_MA_METHOD InpKCMAType = MODE_EMA;     // Typ klouzav√©ho pr≈Ømƒõru

input group "üìä KONSOLIDACE - Vizu√°l"
input bool     InpShowDashboard = true;         // Zobrazit dashboard
input color    InpHighlightColor = clrRed;       // Barva pro zv√Ωraznƒõn√≠

// === TRENDOV√â PARAMETRY ===
input group "üìà TRENDY - Trading"
input bool     InpTrendEnabled = true;           // Povolit trendov√© pozice
input double   InpTrendFixedLot = 0.05;         // Fixn√≠ velikost lotu pro trendy
input int      InpTrendMagicNumber = 66601;     // Magic number pro trendy
input int      InpTrendMaxPositions = 3;        // Max trendov√Ωch pozic souƒçasnƒõ
input double   InpTrendScoreThreshold = 35.0;   // Score threshold pro trend entry (velmi n√≠zk√© = siln√Ω trend)

input group "üìà TRENDY - Risk Management"  
input int      InpTrendSLPips = 25;             // Poƒç√°teƒçn√≠ SL pro trendov√© pozice
input int      InpTrendMinTPPips = 15;          // Minim√°ln√≠ TP pro trend entry
input int      InpTrendTrailStartPips = 12;     // Kdy zaƒç√≠t trailing
input int      InpTrendTrailStepPips = 8;       // Krok trailing SL

input group "üìà TRENDY - Detection"
input double   InpBBExpansionRatio = 1.5;       // BB expansion minimum (50% r≈Øst ≈°√≠≈ôky = siln√° expanze)
input double   InpMinADXForTrend = 28.0;        // Minim√°ln√≠ ADX pro trend potvrzen√≠ (vy≈°≈°√≠ = silnƒõj≈°√≠ trend)
input int      InpMomentumBars = 5;             // Poƒçet consecutive sv√≠ƒçek pro momentum (v√≠ce = silnƒõj≈°√≠ trend)
input int      InpTrendEMAPeriod = 21;          // EMA perioda pro trend smƒõr potvrzen√≠
input int      InpTrendStochasticK = 14;        // Stochastic %K perioda pro trendy
input int      InpTrendStochasticD = 3;         // Stochastic %D perioda pro trendy
input int      InpTrendStochasticSlowing = 3;   // Stochastic slowing pro trendy
input double   InpTrendStochasticLow = 20.0;    // Spodn√≠ hranice pro trend momentum
input double   InpTrendStochasticHigh = 80.0;   // Horn√≠ hranice pro trend momentum

#include "ConsolidationScalping.mqh" // Konsolidaƒçn√≠ strategie
#include "TrendEngine.mqh"            // Trendov√Ω engine
#include "TrendScalping.mqh"          // Trendov√° strategie

CConsolidationScalping consolidation_manager; // Konsolidaƒçn√≠ syst√©m
CTrendScalping trend_manager;                  // Trendov√Ω syst√©m

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   // Kontrola, ≈æe aspo≈à jeden syst√©m je povolen
   if(!InpEnableConsolidation && !InpEnableTrend)
   {
       Print("‚ùå CHYBA: Mus√≠te povolit alespo≈à jeden syst√©m!");
       return(INIT_FAILED);
   }
   
   // Inicializace konsolidaƒçn√≠ho syst√©mu - inputy jsou glob√°ln√≠
   if(InpEnableConsolidation)
   {
       if(!consolidation_manager.OnInit())
       {
           Print("‚ùå CHYBA: ConsolidationScalping inicializace selhala!");
           return(INIT_FAILED);
       }
       Print("‚úÖ KONSOLIDACE: Magic 66600 - Score 80+ aktivn√≠");
   }
   
   // Inicializace trendov√©ho syst√©mu - inputy jsou glob√°ln√≠
   if(InpEnableTrend)
   {
       if(!trend_manager.OnInit())
       {
           Print("‚ùå CHYBA: TrendScalping inicializace selhala!");
           return(INIT_FAILED);
       }
       Print("‚úÖ TRENDY: Magic 66601 - Score <60 aktivn√≠");
   }
   
   // V√Ωpis aktivn√≠ch syst√©m≈Ø
   string active_systems = "";
   if(InpEnableConsolidation && InpEnableTrend)
       active_systems = "üéØ HYBRID SYSTEM: Konsolidace + Trendy";
   else if(InpEnableConsolidation)
       active_systems = "üìä CONSOLIDATION ONLY: Mean reversion";
   else if(InpEnableTrend)
       active_systems = "üìà TREND ONLY: Momentum breakouts";
   
   Print(active_systems + " - System ready!");
   
   TesterHideIndicators(true); 
   
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   if(InpEnableConsolidation)
       consolidation_manager.OnDeinit(reason);
       
   if(InpEnableTrend)
       trend_manager.OnDeinit(reason);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   // Spustit pouze aktivn√≠ syst√©my
   if(InpEnableConsolidation)
       consolidation_manager.OnTick(); // Score 80+ = konsolidaƒçn√≠ obchody
       
   if(InpEnableTrend)
       trend_manager.OnTick();         // Score <60 = trendov√© obchody
}

//+------------------------------------------------------------------+
//| Timer function                                                   |
//+------------------------------------------------------------------+
void OnTimer()
{
   if(InpEnableConsolidation)
       consolidation_manager.OnTimer();
       
   if(InpEnableTrend)
       trend_manager.OnTimer();
}

//+------------------------------------------------------------------+
//| Trade transaction function                                       |
//+------------------------------------------------------------------+
void OnTradeTransaction(const MqlTradeTransaction& trans, const MqlTradeRequest& request, const MqlTradeResult& result)
{
   if(InpEnableConsolidation)
       consolidation_manager.OnTradeTransaction(trans, request, result);
       
   if(InpEnableTrend)
       trend_manager.OnTradeTransaction(trans, request, result);
}
//+------------------------------------------------------------------+